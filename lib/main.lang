# main LIB

# joins a list with the seperator inbetween
FUN join(elements, seperator)
    VAR result = ""
    VAR len = LEN(elements)

    FOR i = 0 TO len THEN
        VAR result = result + elements/i
        IF i != len -1 THEN VAR result = result + seperator
    END

    RETURN result
END

# maps elements from list to a new list using a function
FUN map(elements, func)
    VAR new_elements = []

    FOR i = 0 TO LEN(elements) THEN
        APPEND(new_elements, func(elements/i))
    END

    RETURN new_elements
END

# adds oop to any string
FUN oopify(prefix) -> prefix + "oop"


# pretty prints a list 
FUN PRINT_LIST(list) -> PRINT_LIST_R(list, 0)
FUN PRINT_LIST_R(list, tab)
    IF IS_LIST(list) == 0 THEN
        RAISE("Argument must be a list")
        RETURN 0 
    END

    VAR len = LEN(list)

    FOR i = 0 TO len THEN
        IF IS_LIST(list/i) THEN 
            PRINT_LIST_R(list/i, (tab+1))
        ELSE
            PRINT(" "*tab +  STR(list/i))
        END
    END
    RETURN 1
END

# returns the substring of a given string from start to end
FUN SUBSTR(str, start, end)
    IF start < 0 THEN RAISE("Start must be greater or equal to 0")
    IF end > LEN(str) THEN RAISE("End must be less than or equal to length of the string")

    VAR res = ""
    FOR i = start TO end THEN
        VAR res = res + str/i
    END
    RETURN res
END

# splits a string at a given seperator into a list
FUN SPLIT(text, seperator)
    IF IS_STR(text) == FALSE THEN RAISE("First argument must be a string")
    IF (IS_STR(seperator) == FALSE OR LEN(seperator) != 1) THEN RAISE("Second argument must be a string of length 1")

    VAR text = text + seperator
    VAR res = []

    VAR start = 0
    VAR end = 0

    FOR i = 0 TO LEN(text) THEN
        IF (text/i) == seperator THEN
            VAR sub = SUBSTR(text, start, end)
            APPEND(res, sub)
            VAR start = end + 1
        END
        VAR end = end + 1
    END
    RETURN res
END